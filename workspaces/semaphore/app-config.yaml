app:
  title: Scaffolded Backstage App
  baseUrl: http://localhost:3000

organization:
  name: My Company

backend:
  # Used for enabling authentication, secret is shared by all backend plugins
  # See https://backstage.io/docs/auth/service-to-service-auth for
  # information on the format
  # auth:
  #   keys:
  #     - secret: ${BACKEND_SECRET}
  baseUrl: http://localhost:7007
  listen:
    port: 7007
    # Uncomment the following host directive to bind to specific interfaces
    # host: 127.0.0.1
  csp:
    connect-src: ["'self'", 'http:', 'https:']
    # Content-Security-Policy directives follow the Helmet format: https://helmetjs.github.io/#reference
    # Default Helmet Content-Security-Policy values can be removed by setting the key to false
  cors:
    origin: http://localhost:3000
    methods: [GET, HEAD, PATCH, POST, PUT, DELETE]
    credentials: true
  # This is for local development only, it is not recommended to use this in production
  # The production database configuration is stored in app-config.production.yaml
  database:
    client: better-sqlite3
    connection: ':memory:'
  # workingDirectory: /tmp # Use this to configure a working directory for the scaffolder, defaults to the OS temp-dir

integrations:
  github:
    - host: github.com
      token: ${GITHUB_TOKEN}
  azure:
    - host: dev.azure.com
      token: ${AZURE_DEVOPS_TOKEN}
  gemini:
    - token: ${GEMINI_TOKEN}

proxy:
  ### Example for how to add a proxy endpoint for the frontend.
  ### A typical reason to do this is to handle HTTPS and CORS for internal services.
  # endpoints:
  #   '/test':
  #     target: 'https://example.com'
  #     changeOrigin: true

# Reference documentation http://backstage.io/docs/features/techdocs/configuration
# Note: After experimenting with basic setup, use CI/CD to generate docs
# and an external cloud storage when deploying TechDocs for production use-case.
# https://backstage.io/docs/features/techdocs/how-to-guides#how-to-migrate-from-techdocs-basic-to-recommended-deployment-approach
techdocs:
  builder: 'local' # Alternatives - 'external'
  generator:
    runIn: 'docker' # Alternatives - 'local'
  publisher:
    type: 'local' # Alternatives - 'googleGcs' or 'awsS3'. Read documentation for using alternatives.

auth:
  providers:
    guest:
      userEntityRef: user:development/both-teams-member
scaffolder:
  # see https://backstage.io/docs/features/software-templates/configuration for software template options

catalog:
  import:
    entityFilename: catalog-info.yaml
    pullRequestBranchName: backstage-integration
  rules:
    - allow: [Component, System, API, Resource, Location, Group, User]
  locations:
    # Systems
    - type: file
      target: ../../examples/systems/*.yaml

    # Components
    - type: file
      target: ../../examples/*components/*.yaml

    #Groups
    - type: file
      target: ../../examples/groups/*.yaml

    # Users
    - type: file
      target: ../../examples/users/*.yaml

    ## Uncomment these lines to add more example data
    # - type: url
    #   target: https://github.com/backstage/backstage/blob/master/packages/catalog-model/examples/all.yaml

    ## Uncomment these lines to add an example org
    # - type: url
    #   target: https://github.com/backstage/backstage/blob/master/packages/catalog-model/examples/acme-corp.yaml
    #   rules:
    #     - allow: [User, Group]
  # Experimental: Always use the search method in UrlReaderProcessor.
  # New adopters are encouraged to enable it as this behavior will be the default in a future release.
  useUrlReadersSearch: true

kubernetes:
  # see https://backstage.io/docs/features/kubernetes/configuration for kubernetes configuration options

# see https://backstage.io/docs/permissions/getting-started for more on the permission framework
permission:
  # setting this to `false` will disable permissions
  enabled: true

sonarcloud:
  token: ${SONARCLOUD_TOKEN}
  organization: sep-arguspanoptes

blackduck:
  token: ${BLACKDUCK_TOKEN}
  host: ${BLACKDUCK_BASE_URL}

techInsights:
  factRetrievers:
    sonarcloud-fact-retriever: # Change from array to object
      enabled: true
      cadence: '1 * * * *' # Every 4 hours
    azure-devops-bugs-retriever:
      enabled: true
      cadence: '* * * * *' # Every 4 hours
      filter:
        kind: Component
    dependabotFactRetriever:
      cadence: '* * * * *' # every minute
      lifecycle: { timeToLive: { weeks: 2 } }
    githubPipelineStatusFactRetriever:
      cadence: '0 0 * * *' # every day at 00:00 (midnight)
      lifecycle: { timeToLive: { weeks: 2 } }
    foundationPipelineStatusFactRetriever:
      cadence: '0 0 * * *' # every day at 00:00 (midnight)
      lifecycle: { timeToLive: { weeks: 2 } }
    reportingPipelineStatusFactRetriever:
      cadence: '*/2 * * * *' # every minute
      lifecycle: { timeToLive: { weeks: 2 } }
    blackduck-fact-retriever:
      enabled: true
      cadence: '0 */4 * * *' # Every 4 hours
    githubAdvancedSecurityFactRetriever:
      cadence: '0 * * * *' # every hour
  factChecker:
    checks:
      noHighBugsCheck:
        type: json-rules-engine
        name: No High Bugs Check
        description: Verifies that there are no high severity bugs
        factIds:
          - sonarcloud-fact-retriever
        rule:
          conditions:
            all:
              - fact: bugs
                operator: lessThanInclusive
                value: 0
      noHighCodeSmellsCheck:
        type: json-rules-engine
        name: Code Smells Check
        description: Verifies code smells are within acceptable range
        factIds:
          - sonarcloud-fact-retriever
        rule:
          conditions:
            all:
              - fact: code_smells
                operator: lessThanInclusive
                value: 20
      vulnerabilitiesCheck:
        type: json-rules-engine
        name: Vulnerabilities Check
        description: Verifies vulnerabilities are within acceptable range
        factIds:
          - sonarcloud-fact-retriever
        rule:
          conditions:
            all:
              - fact: vulnerabilities
                operator: lessThanInclusive
                value: 5
      qualityGateCheck:
        type: json-rules-engine
        name: Quality Gate Check
        description: Verifies quality gate status is passed
        factIds:
          - sonarcloud-fact-retriever
        rule:
          conditions:
            all:
              - fact: quality_gate
                operator: equal
                value: 'OK'
      codeCoverageCheck:
        type: json-rules-engine
        name: Code Coverage Check
        description: Verifies code coverage is within acceptable range
        factIds:
          - sonarcloud-fact-retriever
        rule:
          conditions:
            all:
              - fact: code_coverage
                operator: greaterThanInclusive
                value: 35
      commitMessageCheck:
        type: json-rules-engine
        name: Commit Message Check
        description: Ensures there is a recent commit message
        factIds:
          - github-commit-message-retriever
        rule:
          conditions:
            all:
              - fact: last_commit_message
                operator: notEqual
                value: ''
      commitCountCheck:
        type: json-rules-engine
        name: Recent Commits Check
        description: Checks if there are recent commits in the past week
        factIds:
          - github-commit-message-retriever
        rule:
          conditions:
            all:
              - fact: commit_count_last_week
                operator: greaterThan
                value: 0
      dependabotLowAlertCheck:
        type: json-rules-engine
        name: Dependabot Alerts Below Threshold
        description: Checks if Dependabot alerts are below 5
        factIds:
          - dependabotFactRetriever
        rule:
          conditions:
            all:
              - fact: openAlertCount
                operator: lessThan
                value: 5
      githubCodeScanningCheck:
        type: json-rules-engine
        name: Code Scanning Alerts Below Threshold
        description: Checks if Code Scanning alerts are below acceptable threshold
        factIds:
          - githubAdvancedSecurityFactRetriever
        rule:
          conditions:
            all:
              - fact: openCodeScanningAlertCount
                operator: lessThan
                value: 5
      githubSecretScanningCheck:
        type: json-rules-engine
        name: No Secret Scanning Alerts
        description: Checks if there are no exposed secrets detected
        factIds:
          - githubAdvancedSecurityFactRetriever
        rule:
          conditions:
            all:
              - fact: openSecretScanningAlertCount
                operator: lessThanInclusive
                value: 0
      githubCodeScanningAlert:
        type: json-rules-engine
        name: Code Scanning Alerts as dictionary
        description: Checks if Code Scanning alerts are below acceptable threshold
        factIds:
          - githubAdvancedSecurityFactRetriever
        rule:
          conditions:
            all:
              - fact: codeScanningAlerts
                operator: equal
                value: {}
      githubSecretScanningAlert:
        type: json-rules-engine
        name: No Secret Scanning Alerts
        description: Checks if there are no exposed secrets detected
        factIds:
          - githubAdvancedSecurityFactRetriever
        rule:
          conditions:
            all:
              - fact: secretScanningAlerts
                operator: equal
                value: {}
      preProductionFactCheck:
        type: json-rules-engine
        name: Pre Production Pipeline
        description: Checks the number of pipelines that fail
        factIds:
          - githubPipelineStatusFactRetriever
        rule:
          conditions:
            all:
              - fact: successWorkflowRunsCount
                operator: moreThan
                value: 80
